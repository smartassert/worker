name: Build Docker Image

on:
  push:
    branches:
      - master
  release:
    types:
      - published

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set image tag name
        id: version
        env:
          RELEASE_TAG_NAME: ${{ github.event.release.tag_name }}
        run: |
          [[ ! -z "$RELEASE_TAG_NAME" ]] && echo "::set-output name=value::$RELEASE_TAG_NAME" || echo "::set-output name=value::master"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Github Container Repository
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/smartassert/worker:${{ steps.version.outputs.value }}

      - name: Get versions from image-versions.env
        if: ${{ steps.version.outputs.value != 'master' }}
        id: image-versions
        run: |
          while read line
          do
            if [ "" != "$line" ]; then
              key=$(echo $line | cut -d'=' -f1)
              value=$(echo $line | cut -d'=' -f2)
              echo "::set-output name=$key::$value"
            fi
          done < image-versions.env

      - name: Examine versions
        if: ${{ steps.version.outputs.value != 'master' }}
        run: |
          echo COMPILER_VERSION ${{ steps.image-versions.outputs.COMPILER_VERSION }}
          echo CHROME_RUNNER_VERSION ${{ steps.image-versions.outputs.CHROME_RUNNER_VERSION }}
          echo FIREFOX_RUNNER_VERSION ${{ steps.image-versions.outputs.FIREFOX_RUNNER_VERSION }}
          echo DELEGATOR_VERSION ${{ steps.image-versions.outputs.DELEGATOR_VERSION }}
          echo WORKER_VERSION ${{ steps.version.outputs.value }}

      - name: Repository Dispatch
        if: ${{ steps.version.outputs.value != 'master' }}
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.WORKER_DEPLOY_TOKEN }}
          repository: smartassert/worker-deploy
          event-type: worker-release
          client-payload: '{"worker_version": "${{ steps.version.outputs.value }}", "compiler_version": "${{ steps.image-versions.outputs.COMPILER_VERSION }}", "chrome_runner_version": "${{ steps.image-versions.outputs.CHROME_RUNNER_VERSION }}", "firefox_runner_version": "${{ steps.image-versions.outputs.FIREFOX_RUNNER_VERSION }}", "delegator_version": "${{ steps.image-versions.outputs.DELEGATOR_VERSION }}"}'
