name: build

on:
  push:
    branches:
      - master
  release:
    types:
      - published
  pull_request:
    branches:
      - master

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.service_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set env.service_version
        env:
          RELEASE_TAG_NAME: ${{ github.event.release.tag_name }}
        run: |
          [[ -n "$RELEASE_TAG_NAME" ]] && echo "service_version=$RELEASE_TAG_NAME" >> "$GITHUB_ENV" || echo "service_version=master" >> "$GITHUB_ENV"

  verify-setup:
    name: Verify setup
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout bash-ga-ci-tools
        uses: actions/checkout@v3
        with:
          repository: smartassert/bash-ga-ci-tools
          path: ./vendor/smartassert/bash-ga-ci-tools
          ref: main

      - name: Output
        env:
          OUTPUTS: ${{ toJson(needs.setup.outputs) }}
        run: |
          echo "$OUTPUTS"
          ./vendor/smartassert/bash-ga-ci-tools/src/json-contains-no-empty-values.sh

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [setup, verify-setup]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Github Container Repository
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/smartassert/worker:${{ needs.setup.outputs.version }}

  trigger-deploy:
    name: Trigger deploy
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: ${{ needs.setup.outputs.version != 'master' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Trigger deploy workflow
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN_SELF }}
        run: |
          gh workflow run deploy.yml \
          -f version="${{ needs.setup.outputs.version }}"
